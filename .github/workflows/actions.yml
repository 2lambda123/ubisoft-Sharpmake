# Sharpmake GitHub Actions CI configuration
name: build
on:
  push:
  pull_request:
  schedule:
    # Run at 02:17 every day
    - cron: '17 2 * * *'

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2022]
        framework: [net6.0]
        configuration: [debug, release]

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3.3.0

      - name: Bootstrap ${{ matrix.configuration }}
        shell: pwsh
        run: |
          if ('${{runner.os}}' -eq 'Windows')
          { 
            .\Bootstrap.ps1 -configuration ${{ matrix.configuration }} -framework ${{ matrix.framework }} -vsVersion 2022
          }
          else
          {
            ./Bootstrap.ps1 -configuration ${{ matrix.configuration }} -framework ${{ matrix.framework }} 
          }

      - name: CompileSharpmake ${{ matrix.configuration }} ${{ matrix.os }}
        shell: pwsh
        run: |
          if ('${{runner.os}}' -eq 'Windows')
          { 
            .\Compile.ps1 -slnOrPrjFile Sharpmake.sln -configuration "${{ matrix.configuration }}" -platform "Any CPU" -vsVersion "${{ matrix.os }}" -compiler "dotnet"
          }
          else
          {
            ./Compile.ps1 -slnOrPrjFile Sharpmake.sln -configuration ${{ matrix.configuration }} -platform "Any CPU" -compiler "dotnet" 
          }

      - name: Store MSBuild binary logs
        if: always()
        uses: actions/upload-artifact@v3
        with: 
          name: sharpmake-msbuild-logs-${{ github.sha }}
          path: tmp/msbuild

      - name: UnitTest ${{ matrix.framework }} - dotnet test
        if: runner.os == 'Windows' # TODO: fix the tests on mac and linux and remove the first part of the if
        run: dotnet test --no-build --no-restore tmp/projects/sharpmake.unittests/Sharpmake.UnitTests.csproj --framework ${{ matrix.framework }} --configuration ${{ matrix.configuration }}

      - name: RegressionTest
        if: runner.os == 'Windows'
        run: python regression_test.py --sharpmake_exe "tmp\bin\${{ matrix.configuration }}\${{ matrix.framework }}\Sharpmake.Application.exe"

      - name: Upload sharpmake ${{ matrix.framework }} ${{ runner.os }}-release binaries
        if: matrix.configuration == 'release'
        uses: actions/upload-artifact@v3
        with:
          name: 'Sharpmake-${{ matrix.framework }}-${{ runner.os }}-${{ github.sha }}'
          path: tmp/bin/release/${{ matrix.framework }}

  functional_test:
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019] # only windows for now, but ideally should be all. TODO: add windows-2022
        framework: [net6.0]

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3.3.0

      - name: Download sharpmake ${{ matrix.framework }} ${{ runner.os }}-release binaries
        uses: actions/download-artifact@v3
        with:
          name: 'Sharpmake-${{ matrix.framework }}-${{ runner.os }}-${{ github.sha }}'
          path: tmp/bin/release/${{ matrix.framework }}

      - name: FunctionalTest
        if: runner.os == 'Windows'
        run: python functional_test.py --sharpmake_exe "tmp/bin/release/${{ matrix.framework }}/Sharpmake.Application.exe"

  samples:
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2019, windows-2022]
        framework: [net6.0]
        configuration: [debug, release]
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3.3.0

      # Setting a VS_VERSION_SUFFIX variable for use by steps that are using solutions specific to VS2019 or VS2022
      - name: SetVSVersionSuffix-VS2019
        if: runner.os == 'Windows' && matrix.os == 'windows-2019'
        run: |
          "VS_VERSION_SUFFIX=vs2019" >> $env:GITHUB_ENV

      - name: SetVSVersionSuffix-VS2022
        if: runner.os == 'Windows' && matrix.os == 'windows-2022'
        run: |
          "VS_VERSION_SUFFIX=vs2022" >> $env:GITHUB_ENV

      - name: Download sharpmake ${{ matrix.framework }} ${{ runner.os }}-release binaries
        uses: actions/download-artifact@v3
        with:
          name: 'Sharpmake-${{ matrix.framework }}-${{ runner.os }}-${{ github.sha }}'
          path: tmp/bin/release/${{ matrix.framework }}

      - name: CompileCommandDatabase ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows' && matrix.configuration == 'debug' # only has a debug config, so skip in release
        env:
          testFolder: 'samples\CompileCommandDatabase'
        shell: pwsh
        run: | # TODO: ideally here we should try and compile the generated json file
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "CompileCommandDatabase.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "CompileCommandDatabaseSolution_vs2017_win64.sln" -configuration ${{ matrix.configuration }} -platform x64 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\exeprojectname\output\win64\${{ matrix.configuration }}\exeprojectname.exe"

      - name: ConfigureOrder ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows' && matrix.configuration == 'release'
        env:
          testFolder: 'samples\ConfigureOrder'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "main.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "configureorderingsolution.sln" -configuration ${{ matrix.configuration }} -platform Win32 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\output\win32\${{ matrix.configuration }}\childproject.exe"
          .\RunTest.ps1  "${env:testFolder}\projects\output\win32\${{ matrix.configuration }}\foobarproject.exe"
          .\RunTest.ps1  "${env:testFolder}\projects\output\win32\${{ matrix.configuration }}\parentproject.exe"

      - name: CPPCLI ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows' && matrix.os == 'windows-2019'
        env:
          testFolder: 'samples/CPPCLI'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "CLRTest.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "CPPCLI.vs2017.v4_6_2.sln" -configuration ${{ matrix.configuration }} -platform Win32 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\output\vs2017\v4_6_2\${{ matrix.configuration }}\TestCSharpConsole.exe"
          .\Compile.ps1 -slnOrPrjFile "CPPCLI.vs2019.v4_7_2.sln" -configuration ${{ matrix.configuration }} -platform Win32 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\output\vs2019\v4_7_2\${{ matrix.configuration }}\TestCSharpConsole.exe"

      - name: CSharpHelloWorld old frameworks ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows' && matrix.os == 'windows-2019'
        env:
          testFolder: 'samples/CSharpHelloWorld'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloWorld.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "HelloWorldSolution.vs2017.v4_6_1.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\helloworld\output\anycpu\${{ matrix.configuration }}\the other name.exe"
        # cannot compile .net 7.0 with vs 2019
        #  .\Compile.ps1 -slnOrPrjFile "HelloWorldSolution.vs2022.net7_0.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
        #  .\RunTest.ps1  "${env:testFolder}\projects\helloworld\output\anycpu\${{ matrix.configuration }}\the other name.exe"

      - name: CSharpHelloWorld ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows' && matrix.os == 'windows-2022'
        env:
          testFolder: 'samples/CSharpHelloWorld'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloWorld.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "HelloWorldSolution.vs2022.net7_0.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\helloworld\output\anycpu\${{ matrix.configuration }}\net7.0\the other name.exe"

      - name: CSharpImports ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples/CSharpImports'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "CSharpImports.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "CSharpImportsSolution.vs2019.v4_7_2.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\csharpimports\output\anycpu\${{ matrix.configuration }}\the other name.exe"

      - name: CSharpVsix ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples/CSharpVsix'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "CSharpVsix.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "CSharpVsixSolution.vs2017.v4_7_2.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
        # that one can't be run unfortunately

      - name: CustomBuildStep ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples/CustomBuildStep'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "CustomBuildStep.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "custombuildstepsolution_vs2017_win64.sln" -configuration ${{ matrix.configuration }} -platform x64 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\output\win64\${{ matrix.configuration }}\custombuildstep.exe"

      - name: CSharpWCF ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples/CSharpWCF'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "CSharpWCF.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "CSharpWCFSolution.vs2015.v4_5_2.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\codebase" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
        # that one can't be run unfortunately


      - name: FastBuildSimpleExecutable ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples/FastBuildSimpleExecutable'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "FastBuildSimpleExecutable.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "fastbuildsample_${env:VS_VERSION_SUFFIX}_win64.sln" -configuration ${{ matrix.configuration }} -platform x64 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\output\win64\${{ matrix.configuration }}\fastbuildsimpleexecutable.exe"

      # Temp disable after Github VM update which updated the NDK and broke it
      # - name: HelloAndroid ${{ matrix.configuration }}
      #   if: runner.os == 'Windows'
      #   env:
      #     testFolder: 'samples/HelloAndroid'
      #   shell: pwsh
      #   run: |
      #     $env:JAVA_HOME = $env:JAVA_HOME_11_X64
      #     .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloAndroid.main.sharpmake.cs" -framework ${{ matrix.framework }}
      #     .\Compile.ps1 -slnOrPrjFile "HelloAndroid_android_vs2019.sln" -configuration "${{ matrix.configuration }}_NoBlob" -platform arm64_v8a -WorkingDirectory "${env:testFolder}\codebase\temp\solutions" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
      #     .\Compile.ps1 -slnOrPrjFile "HelloAndroid_android_vs2019.sln" -configuration "${{ matrix.configuration }}_NoBlob" -platform x86_64 -WorkingDirectory "${env:testFolder}\codebase\temp\solutions" -VsVersion ${{ matrix.os }} -compiler "MsBuild"

      - name: HelloClangCl ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples/HelloClangCl'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloClangCl.Main.sharpmake.cs" -framework ${{ matrix.framework }} -devenvVersion ${env:VS_VERSION_SUFFIX}
          .\Compile.ps1 -slnOrPrjFile "HelloClangCl_win64_${env:VS_VERSION_SUFFIX}.sln" -configuration "ClangCl ${{ matrix.configuration }}" -platform MSBuild -WorkingDirectory "${env:testFolder}\codebase\temp\solutions" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\Compile.ps1 -slnOrPrjFile "HelloClangCl_win64_${env:VS_VERSION_SUFFIX}.sln" -configuration "ClangCl ${{ matrix.configuration }}" -platform FastBuild -WorkingDirectory "${env:testFolder}\codebase\temp\solutions" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\codebase\temp\bin\win64_clangcl_${{ matrix.configuration }}_fastbuild\exe.exe"
          .\Compile.ps1 -slnOrPrjFile "HelloClangCl_win64_${env:VS_VERSION_SUFFIX}.sln" -configuration "MSVC ${{ matrix.configuration }}" -platform MSBuild -WorkingDirectory "${env:testFolder}\codebase\temp\solutions" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\Compile.ps1 -slnOrPrjFile "HelloClangCl_win64_${env:VS_VERSION_SUFFIX}.sln" -configuration "MSVC ${{ matrix.configuration }}" -platform FastBuild -WorkingDirectory "${env:testFolder}\codebase\temp\solutions" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\codebase\temp\bin\win64_msvc_${{ matrix.configuration }}_fastbuild\exe.exe"
        #  not runing tests due to error : Couldn't find the file generated by the postbuild step: 'codebase\temp\bin\win64_clangcl_release_msbuild\dll1.step_output.txt' 
        #  .\RunTest.ps1  "${env:testFolder}\codebase\temp\bin\win64_clangcl_${{ matrix.configuration }}_msbuild\exe.exe"
        #  .\RunTest.ps1  "${env:testFolder}\codebase\temp\bin\win64_msvc_${{ matrix.configuration }}_msbuild\exe.exe"

      - name: HelloEvents ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples/HelloEvents'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloEvents.Main.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "HelloEvents_win64_${env:VS_VERSION_SUFFIX}.sln" -configuration ${{ matrix.configuration }} -platform Win64 -WorkingDirectory "${env:testFolder}\codebase\temp\solutions" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\codebase\temp\bin\win64_${{ matrix.configuration }}_msbuild\exe\exe.exe"
          .\Compile.ps1 -slnOrPrjFile "HelloEvents_win64_${env:VS_VERSION_SUFFIX}.sln" -configuration "${{ matrix.configuration }}_FastBuild" -platform Win64 -WorkingDirectory "${env:testFolder}\codebase\temp\solutions" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\codebase\temp\bin\win64_${{ matrix.configuration }}_fastbuild\exe\exe.exe"

      - name: HelloLinux ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Linux'
        env:
          testFolder: 'samples/HelloLinux'
        shell: pwsh
        run: |
          ./RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloLinux.Main.sharpmake.cs" -framework ${{ matrix.framework }} -addMono
          ./Compile.ps1 -slnOrPrjFile "HelloLinux_linux_make.make" -configuration ${{ matrix.configuration }} -WorkingDirectory "${env:testFolder}/codebase/temp/solutions" -compiler "make"
          ./RunTest.ps1  "${env:testFolder}/codebase/temp/bin/linux_${{ matrix.configuration }}/exe"

      - name: HelloWorld ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples\HelloWorld'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloWorld.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "helloworld_vs2019_win32.sln" -configuration ${{ matrix.configuration }} -platform Win32 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\output\win32\${{ matrix.configuration }}\helloworld.exe"
          .\Compile.ps1 -slnOrPrjFile "helloworld_vs2019_win64.sln" -configuration ${{ matrix.configuration }} -platform x64 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\output\win64\${{ matrix.configuration }}\helloworld.exe"

      - name: HelloXCode ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'macOS'
        env:
          testFolder: 'samples/HelloXCode'
        run: |
          pwsh ./RunSharpmake.ps1 -workingDirectory $testFolder -sharpmakeFile "HelloXCode.Main.sharpmake.cs" -framework ${{ matrix.framework }} -addMono
          set -o pipefail
          pwsh ./Compile.ps1 -slnOrPrjFile "HelloXCode_mac.xcworkspace" -configuration ${{ matrix.configuration }} -WorkingDirectory "$testFolder/codebase/temp/solutions" -compiler "xcode" -scheme 'exe FastBuild'
          pwsh ./RunTest.ps1  "$testFolder/codebase/temp/bin/mac_${{ matrix.configuration }}_fastbuild/exe"
          pwsh ./Compile.ps1 -slnOrPrjFile "HelloXCode_mac.xcworkspace" -configuration ${{ matrix.configuration }} -WorkingDirectory "$testFolder/codebase/temp/solutions" -compiler "xcode" -scheme exe_prelinked_mac
          pwsh ./RunTest.ps1  "$testFolder/codebase/temp/bin/mac_${{ matrix.configuration }}/exe_prelinked"
          pwsh ./Compile.ps1 -slnOrPrjFile "HelloXCode_mac.xcworkspace" -configuration ${{ matrix.configuration }} -WorkingDirectory "$testFolder/codebase/temp/solutions" -compiler "xcode" -scheme exe_mac
          cd $testFolder/codebase/temp/bin/mac_${{ matrix.configuration }}
          DYLD_LIBRARY_PATH=. ./exe

      - name: NetCore/DotNetCoreFrameworkHelloWorld ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples\NetCore\DotNetCoreFrameworkHelloWorld'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloWorld.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "HelloWorldMultiFrameworkSolution.vs2019.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1 -exeToRun dotnet -workingDirectory "${env:testFolder}\projects\helloworldmultiframework\output\anycpu\${{ matrix.configuration }}\netcoreapp3.1" -arguments "`"the other name.dll`""
          .\Compile.ps1 -slnOrPrjFile "HelloWorldSolution.vs2017.netcore2_1.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\Compile.ps1 -slnOrPrjFile "HelloWorldSolution.vs2019.netcore3_1.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1 -exeToRun dotnet -workingDirectory "${env:testFolder}\projects\helloworld\output\anycpu\${{ matrix.configuration }}\netcoreapp3.1" -arguments "`"the other name.dll`""
        # not working tests because .netcore 2.1.0 is not available on runner
        #  .\RunTest.ps1 -exeToRun dotnet -workingDirectory "${env:testFolder}\projects\helloworldmultiframework\output\anycpu\${{ matrix.configuration }}\netcoreapp2.1" -arguments "`"the other name.dll`""
        #  .\RunTest.ps1 -exeToRun dotnet -workingDirectory "${env:testFolder}\projects\helloworld\output\anycpu\${{ matrix.configuration }}\netcoreapp2.1" -arguments "`"the other name.dll`""

      - name: NetCore/DotNetFrameworkHelloWorld ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples\NetCore\DotNetFrameworkHelloWorld'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloWorld.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "HelloWorldMultiFrameworkSolution.vs2019.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\helloworldmultiframework\output\anycpu\${{ matrix.configuration }}\net461\the other name.exe"
          .\RunTest.ps1  "${env:testFolder}\projects\helloworldmultiframework\output\anycpu\${{ matrix.configuration }}\net472\the other name.exe"
          .\Compile.ps1 -slnOrPrjFile "HelloWorldSolution.vs2019.v4_7_2.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\helloworld\output\vs2019\${{ matrix.configuration }}\the other name.exe"

      - name: NetCore/DotNetFrameworkHelloWorld_OldFrameworks ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows' && matrix.os == 'windows-2019'
        env:
          testFolder: 'samples/NetCore/DotNetFrameworkHelloWorld'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloWorld.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "HelloWorldSolution.vs2017.v4_6_1.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\helloworld\output\vs2017\${{ matrix.configuration }}\the other name.exe"

      - name: NetCore/DotNetMultiFrameworksHelloWorld ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples\NetCore\DotNetMultiFrameworksHelloWorld'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloWorld.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "HelloWorldMultiFrameworksSolution.vs2019.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1 -exeToRun dotnet -workingDirectory "${env:testFolder}\projects\helloworldmultiframeworks\output\anycpu\${{ matrix.configuration }}\netcoreapp3.1" -arguments HelloWorldMultiFrameworks.dll
          .\RunTest.ps1 "${env:testFolder}\projects\helloworldmultiframeworks\output\anycpu\${{ matrix.configuration }}\net461\HelloWorldMultiFrameworks.exe"

      - name: NetCore/DotNetOSMultiFrameworksHelloWorld ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows' && matrix.os == 'windows-2022'
        env:
          testFolder: 'samples\NetCore\DotNetOSMultiFrameworksHelloWorld'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "HelloWorld.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "OSMultiFrameworksHelloWorldSolution.sln" -configuration ${{ matrix.configuration }} -platform "Any CPU" -WorkingDirectory "${env:testFolder}\codebase\temp\solutions" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\codebase\temp\bin\anycpu_${{ matrix.configuration }}\net7.0-windows\HelloWorldExe.exe"
          .\RunTest.ps1  "${env:testFolder}\codebase\temp\bin\anycpu_${{ matrix.configuration }}\net472\HelloWorldExe.exe"

      - name: PackageReferences ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples\PackageReferences'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "PackageReferences.sharpmake.cs" -framework ${{ matrix.framework }}
          .\RunTest.ps1  -exeToRun nuget -arguments "restore PackageReferenceSolution.vs2017.v4_7_2.sln" -workingDirectory ${env:testFolder}\projects 
          .\Compile.ps1 -slnOrPrjFile "PackageReferenceSolution.vs2017.v4_7_2.sln" -configuration ${{ matrix.configuration }} -platform x64 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\csharppackagereferences\output\vs2017\${{ matrix.configuration }}\PackageReference.exe"
          .\RunTest.ps1  "${env:testFolder}\projects\cpppackagereferences\output\vs2017\${{ matrix.configuration }}\cpppackagereferences.exe"
          .\RunTest.ps1  -exeToRun nuget -arguments "restore PackageReferenceSolution.vs2019.v4_7_2.sln" -workingDirectory ${env:testFolder}\projects
          .\Compile.ps1 -slnOrPrjFile "PackageReferenceSolution.vs2019.v4_7_2.sln" -configuration ${{ matrix.configuration }} -platform x64 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\csharppackagereferences\output\vs2019\${{ matrix.configuration }}\PackageReference.exe"
          .\RunTest.ps1  "${env:testFolder}\projects\cpppackagereferences\output\vs2019\${{ matrix.configuration }}\cpppackagereferences.exe"

      - name: Install Qt
        if: runner.os == 'Windows'
        uses: jurplel/install-qt-action@v3.0.0

      - name: QTFileCustomBuild ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples/QTFileCustomBuild'
        shell: pwsh
        run: | # TODO: there's a retail config, compile it as well or remove it
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "QTFileCustomBuild.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "qtfilecustombuild_vs2017_win64.sln" -configuration ${{ matrix.configuration }} -platform x64 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\output\win64\${{ matrix.configuration }}\qtfilecustombuild.exe"

      - name: SimpleExeLibDependency ${{ matrix.configuration }} ${{ matrix.os }}
        if: runner.os == 'Windows' && matrix.configuration == 'debug'
        env:
          testFolder: 'samples/SimpleExeLibDependency'
        shell: pwsh
        run: |
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder} -sharpmakeFile "SimpleExeLibDependency.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "ExeLibSolutionName_vs2017_win64.sln" -configuration ${{ matrix.configuration }} -platform x64 -WorkingDirectory "${env:testFolder}\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\projects\output\win64\${{ matrix.configuration }}\simpleexeprojectname.exe"

      - name: vcpkg ${{matrix.configuration}} ${{ matrix.os }}
        if: runner.os == 'Windows'
        env:
          testFolder: 'samples/vcpkg'
        shell: pwsh
        run: |
          .\extract-vcpkg.ps1 -workingDirectory ${env:testFolder}
          .\RunSharpmake.ps1 -workingDirectory ${env:testFolder}\sharpmake -sharpmakeFile "main.sharpmake.cs" -framework ${{ matrix.framework }}
          .\Compile.ps1 -slnOrPrjFile "vcpkgsample_${Env:VS_VERSION_SUFFIX}.sln" -configuration ${{ matrix.configuration }} -platform x64 -WorkingDirectory "${env:testFolder}\tmp\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\bin\${{ matrix.configuration }}-msbuild\vcpkgsample.exe"
          .\Compile.ps1 -slnOrPrjFile "vcpkgsample_${Env:VS_VERSION_SUFFIX}.sln" -configuration ${{ matrix.configuration }}_FastBuild -platform x64 -WorkingDirectory "${env:testFolder}\tmp\projects" -VsVersion ${{ matrix.os }} -compiler "MsBuild"
          .\RunTest.ps1  "${env:testFolder}\bin\${{ matrix.configuration }}-fastbuild\vcpkgsample.exe"
